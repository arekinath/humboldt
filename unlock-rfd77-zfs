#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright (c) 2017, Joyent, Inc.
#

set -o pipefail

. /lib/svc/share/smf_include.sh

smf_is_globalzone || exit $SMF_EXIT_OK

fatal() {
	echo "fatal:" "$@" >&2
	exit $SMF_EXIT_ERR_FATAL
}

stop() {
	echo "skipping unlock:" "$@" >&2
	exit $SMF_EXIT_OK
}

#
# If we booted in noimport mode, then don't do any unlocking.
#
/bin/bootparams | grep "^noimport=true" >/dev/null
if [[ $? -eq 0 ]]; then
	stop "system booted noimport mode"
fi

#
# We need dsk and usb devices.
#
/usr/sbin/devfsadm

#
# Make sure the pool is imported
#
zpool import -f zones

#
# We have to start our own pcscd here temporarily, since /var/run hasn't been
# mounted over yet by fs-minimal. If we let the actual pcscd SMF service start
# now, that mount would hide its socket and make it useless later.
#
# So instead we start one just for unlocking here and then kill it when we
# exit.
#
/usr/sbin/amd64/pcscd --force-reader-polling
while [[ ! -f /var/run/pcscd/pcscd.pid ]]; do
	sleep 0.1
done
pcscd_pid=$(cat /var/run/pcscd/pcscd.pid)

kill_pcscd() {
	kill $pcscd_pid
}
trap kill_pcscd EXIT

#
# If we're in a qemu VM with the emulated CCID device, after reboot it's often
# out of sync with us. Doing a list command will cause PCSC to reset it and
# bring it back into sync.
#
pivtool list >/dev/null 2>/dev/null

#
# Check that we're on a PI that has zfs encryption at all before going any
# further.
#
read encstatus < <(zpool get -o value -pH feature@encryption zones)
if [[ "z${encstatus}" == "z" ]]; then
	stop "ZFS encryption not enabled on this system"
fi

#
# Now run around any encrypted datasets on the system and unlock them.
#
# The piv-system-token service should have already set up the system token
# and unlocked it (stored the PIN in the SHM segment), so we should not require
# a PIN here.
#
while read name encroot box; do
	if [[ "${name}" == "${encroot}" && "${name}" != "zones/swap" && \
	    "${box}" != "-" ]]; then
		echo "$box" | \
		    openssl enc -d -base64 | \
		    pivtool unbox | \
		    zfs load-key "${name}"
		st=("${PIPESTATUS[@]}")
		if [[ ${st[0]} -ne 0 || ${st[1]} -ne 0 ]]; then
			fatal "base64 decode failed: box is invalid?"
		fi
		case ${st[2]} in
		0)
			;;
		4)
			fatal "pivtool unbox wants a PIN: did sys-token fail?"
			;;
		*)
			fatal "pivtool unbox failed"
			;;
		esac
		if [[ ${st[3]} -ne 0 ]]; then
			fatal "zfs load-key failed"
		fi
	fi
done < <(zfs list -p -H -o name,encryptionroot,rfd77:local-box)

#
# Re-create the swap zvol at each boot with a unique key for that boot.
# This way it's unreadable after a reboot.
#
read sz < <(zfs get -pH -o value volsize zones/swap)
if [[ $? -eq 0 && $sz -gt 0 ]]; then
	zfs destroy zones/swap || fatal "zfs destroy swap failed"
	dd if=/dev/random bs=32 count=1 2>/dev/null | \
	    zfs create -V $sz -o encryption=on -o keyformat=raw zones/swap \
	    || fatal "creating swap zvol failed"
fi

exit $SMF_EXIT_OK
